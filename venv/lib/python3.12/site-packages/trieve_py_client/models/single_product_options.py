# coding: utf-8

"""
    Trieve API

    Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.

    The version of the OpenAPI document: 0.13.0
    Contact: developers@trieve.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SingleProductOptions(BaseModel):
    """
    SingleProductOptions
    """ # noqa: E501
    group_tracking_id: Optional[StrictStr] = Field(default=None, alias="groupTrackingId")
    product_description_html: Optional[StrictStr] = Field(default=None, alias="productDescriptionHtml")
    product_name: Optional[StrictStr] = Field(default=None, alias="productName")
    product_primary_image_url: Optional[StrictStr] = Field(default=None, alias="productPrimaryImageUrl")
    product_questions: Optional[List[StrictStr]] = Field(default=None, alias="productQuestions")
    product_tracking_id: Optional[StrictStr] = Field(default=None, alias="productTrackingId")
    rec_search_query: Optional[StrictStr] = Field(default=None, alias="recSearchQuery")
    __properties: ClassVar[List[str]] = ["groupTrackingId", "productDescriptionHtml", "productName", "productPrimaryImageUrl", "productQuestions", "productTrackingId", "recSearchQuery"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SingleProductOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if group_tracking_id (nullable) is None
        # and model_fields_set contains the field
        if self.group_tracking_id is None and "group_tracking_id" in self.model_fields_set:
            _dict['groupTrackingId'] = None

        # set to None if product_description_html (nullable) is None
        # and model_fields_set contains the field
        if self.product_description_html is None and "product_description_html" in self.model_fields_set:
            _dict['productDescriptionHtml'] = None

        # set to None if product_name (nullable) is None
        # and model_fields_set contains the field
        if self.product_name is None and "product_name" in self.model_fields_set:
            _dict['productName'] = None

        # set to None if product_primary_image_url (nullable) is None
        # and model_fields_set contains the field
        if self.product_primary_image_url is None and "product_primary_image_url" in self.model_fields_set:
            _dict['productPrimaryImageUrl'] = None

        # set to None if product_questions (nullable) is None
        # and model_fields_set contains the field
        if self.product_questions is None and "product_questions" in self.model_fields_set:
            _dict['productQuestions'] = None

        # set to None if product_tracking_id (nullable) is None
        # and model_fields_set contains the field
        if self.product_tracking_id is None and "product_tracking_id" in self.model_fields_set:
            _dict['productTrackingId'] = None

        # set to None if rec_search_query (nullable) is None
        # and model_fields_set contains the field
        if self.rec_search_query is None and "rec_search_query" in self.model_fields_set:
            _dict['recSearchQuery'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SingleProductOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "groupTrackingId": obj.get("groupTrackingId"),
            "productDescriptionHtml": obj.get("productDescriptionHtml"),
            "productName": obj.get("productName"),
            "productPrimaryImageUrl": obj.get("productPrimaryImageUrl"),
            "productQuestions": obj.get("productQuestions"),
            "productTrackingId": obj.get("productTrackingId"),
            "recSearchQuery": obj.get("recSearchQuery")
        })
        return _obj


