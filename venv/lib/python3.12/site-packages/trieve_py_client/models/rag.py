# coding: utf-8

"""
    Trieve API

    Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.

    The version of the OpenAPI document: 0.13.0
    Contact: developers@trieve.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from trieve_py_client.models.clickhouse_rag_types import ClickhouseRagTypes
from trieve_py_client.models.search_query_rating import SearchQueryRating
from typing import Optional, Set
from typing_extensions import Self

class RAG(BaseModel):
    """
    RAG
    """ # noqa: E501
    detected_hallucinations: Optional[List[StrictStr]] = Field(default=None, description="The detected hallucinations of the RAG event")
    event_type: StrictStr
    hallucination_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The hallucination score of the RAG event")
    llm_response: Optional[StrictStr] = Field(default=None, description="The response from the LLM")
    query_rating: Optional[SearchQueryRating] = None
    rag_type: Optional[ClickhouseRagTypes] = None
    results: Optional[List[Any]] = Field(default=None, description="The results of the RAG event")
    search_id: Optional[StrictStr] = Field(default=None, description="The search id to associate the RAG event with a search")
    user_id: Optional[StrictStr] = Field(default=None, description="The user id of the user who made the RAG event")
    user_message: StrictStr = Field(description="The user message")
    __properties: ClassVar[List[str]] = ["detected_hallucinations", "event_type", "hallucination_score", "llm_response", "query_rating", "rag_type", "results", "search_id", "user_id", "user_message"]

    @field_validator('event_type')
    def event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['rag']):
            raise ValueError("must be one of enum values ('rag')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RAG from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of query_rating
        if self.query_rating:
            _dict['query_rating'] = self.query_rating.to_dict()
        # set to None if detected_hallucinations (nullable) is None
        # and model_fields_set contains the field
        if self.detected_hallucinations is None and "detected_hallucinations" in self.model_fields_set:
            _dict['detected_hallucinations'] = None

        # set to None if hallucination_score (nullable) is None
        # and model_fields_set contains the field
        if self.hallucination_score is None and "hallucination_score" in self.model_fields_set:
            _dict['hallucination_score'] = None

        # set to None if llm_response (nullable) is None
        # and model_fields_set contains the field
        if self.llm_response is None and "llm_response" in self.model_fields_set:
            _dict['llm_response'] = None

        # set to None if query_rating (nullable) is None
        # and model_fields_set contains the field
        if self.query_rating is None and "query_rating" in self.model_fields_set:
            _dict['query_rating'] = None

        # set to None if rag_type (nullable) is None
        # and model_fields_set contains the field
        if self.rag_type is None and "rag_type" in self.model_fields_set:
            _dict['rag_type'] = None

        # set to None if results (nullable) is None
        # and model_fields_set contains the field
        if self.results is None and "results" in self.model_fields_set:
            _dict['results'] = None

        # set to None if search_id (nullable) is None
        # and model_fields_set contains the field
        if self.search_id is None and "search_id" in self.model_fields_set:
            _dict['search_id'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RAG from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "detected_hallucinations": obj.get("detected_hallucinations"),
            "event_type": obj.get("event_type"),
            "hallucination_score": obj.get("hallucination_score"),
            "llm_response": obj.get("llm_response"),
            "query_rating": SearchQueryRating.from_dict(obj["query_rating"]) if obj.get("query_rating") is not None else None,
            "rag_type": obj.get("rag_type"),
            "results": obj.get("results"),
            "search_id": obj.get("search_id"),
            "user_id": obj.get("user_id"),
            "user_message": obj.get("user_message")
        })
        return _obj


