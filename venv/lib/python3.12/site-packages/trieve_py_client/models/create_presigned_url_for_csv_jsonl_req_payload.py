# coding: utf-8

"""
    Trieve API

    Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.

    The version of the OpenAPI document: 0.13.0
    Contact: developers@trieve.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from trieve_py_client.models.chunk_req_payload_mapping import ChunkReqPayloadMapping
from typing import Optional, Set
from typing_extensions import Self

class CreatePresignedUrlForCsvJsonlReqPayload(BaseModel):
    """
    CreatePresignedUrlForCsvJsonlReqPayload
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Description is an optional convience field so you do not have to remember what the file contains or is about. It will be included on the group resulting from the file which will hold its chunk.")
    file_name: StrictStr = Field(description="Name of the file being uploaded, including the extension. Will be used to determine CSV or JSONL for processing.")
    fulltext_boost_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount to multiplicatevly increase the frequency of the tokens in the boost phrase for each row's chunk by. Applies to fulltext (SPLADE) and keyword (BM25) search.")
    group_tracking_id: Optional[StrictStr] = Field(default=None, description="Group tracking id is an optional field which allows you to specify the tracking id of the group that is created from the file. Chunks created will be created with the tracking id of `group_tracking_id|<index of chunk>`")
    link: Optional[StrictStr] = Field(default=None, description="Link to the file. This can also be any string. This can be used to filter when searching for the file's resulting chunks. The link value will not affect embedding creation.")
    mappings: Optional[List[ChunkReqPayloadMapping]] = Field(default=None, description="Specify all of the mappings between columns or fields in a CSV or JSONL file and keys in the ChunkReqPayload. Array fields like tag_set, image_urls, and group_tracking_ids can have multiple mappings. Boost phrase can also have multiple mappings which get concatenated. Other fields can only have one mapping and only the last mapping will be used.")
    metadata: Optional[Any] = Field(default=None, description="Metadata is a JSON object which can be used to filter chunks. This is useful for when you want to filter chunks by arbitrary metadata. Unlike with tag filtering, there is a performance hit for filtering on metadata. Will be passed down to the file's chunks.")
    semantic_boost_factor: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Arbitrary float (positive or negative) specifying the multiplicate factor to apply before summing the phrase vector with the chunk_html embedding vector. Applies to semantic (embedding model) search.")
    tag_set: Optional[List[StrictStr]] = Field(default=None, description="Tag set is a comma separated list of tags which will be passed down to the chunks made from the file. Each tag will be joined with what's creatd per row of the CSV or JSONL file.")
    time_stamp: Optional[StrictStr] = Field(default=None, description="Time stamp should be an ISO 8601 combined date and time without timezone. Time_stamp is used for time window filtering and recency-biasing search results. Will be passed down to the file's chunks.")
    upsert_by_tracking_id: Optional[StrictBool] = Field(default=None, description="Upsert by tracking_id. If true, chunks will be upserted by tracking_id. If false, chunks with the same tracking_id as another already existing chunk will be ignored. Defaults to true.")
    __properties: ClassVar[List[str]] = ["description", "file_name", "fulltext_boost_factor", "group_tracking_id", "link", "mappings", "metadata", "semantic_boost_factor", "tag_set", "time_stamp", "upsert_by_tracking_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatePresignedUrlForCsvJsonlReqPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in mappings (list)
        _items = []
        if self.mappings:
            for _item in self.mappings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['mappings'] = _items
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if fulltext_boost_factor (nullable) is None
        # and model_fields_set contains the field
        if self.fulltext_boost_factor is None and "fulltext_boost_factor" in self.model_fields_set:
            _dict['fulltext_boost_factor'] = None

        # set to None if group_tracking_id (nullable) is None
        # and model_fields_set contains the field
        if self.group_tracking_id is None and "group_tracking_id" in self.model_fields_set:
            _dict['group_tracking_id'] = None

        # set to None if link (nullable) is None
        # and model_fields_set contains the field
        if self.link is None and "link" in self.model_fields_set:
            _dict['link'] = None

        # set to None if mappings (nullable) is None
        # and model_fields_set contains the field
        if self.mappings is None and "mappings" in self.model_fields_set:
            _dict['mappings'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if semantic_boost_factor (nullable) is None
        # and model_fields_set contains the field
        if self.semantic_boost_factor is None and "semantic_boost_factor" in self.model_fields_set:
            _dict['semantic_boost_factor'] = None

        # set to None if tag_set (nullable) is None
        # and model_fields_set contains the field
        if self.tag_set is None and "tag_set" in self.model_fields_set:
            _dict['tag_set'] = None

        # set to None if time_stamp (nullable) is None
        # and model_fields_set contains the field
        if self.time_stamp is None and "time_stamp" in self.model_fields_set:
            _dict['time_stamp'] = None

        # set to None if upsert_by_tracking_id (nullable) is None
        # and model_fields_set contains the field
        if self.upsert_by_tracking_id is None and "upsert_by_tracking_id" in self.model_fields_set:
            _dict['upsert_by_tracking_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatePresignedUrlForCsvJsonlReqPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "file_name": obj.get("file_name"),
            "fulltext_boost_factor": obj.get("fulltext_boost_factor"),
            "group_tracking_id": obj.get("group_tracking_id"),
            "link": obj.get("link"),
            "mappings": [ChunkReqPayloadMapping.from_dict(_item) for _item in obj["mappings"]] if obj.get("mappings") is not None else None,
            "metadata": obj.get("metadata"),
            "semantic_boost_factor": obj.get("semantic_boost_factor"),
            "tag_set": obj.get("tag_set"),
            "time_stamp": obj.get("time_stamp"),
            "upsert_by_tracking_id": obj.get("upsert_by_tracking_id")
        })
        return _obj


