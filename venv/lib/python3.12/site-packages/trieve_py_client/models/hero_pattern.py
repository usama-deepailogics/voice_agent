# coding: utf-8

"""
    Trieve API

    Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.

    The version of the OpenAPI document: 0.13.0
    Contact: developers@trieve.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class HeroPattern(BaseModel):
    """
    HeroPattern
    """ # noqa: E501
    background_color: Optional[StrictStr] = Field(default=None, alias="backgroundColor")
    foreground_color: Optional[StrictStr] = Field(default=None, alias="foregroundColor")
    foreground_opacity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="foregroundOpacity")
    hero_pattern_name: Optional[StrictStr] = Field(default=None, alias="heroPatternName")
    hero_pattern_svg: Optional[StrictStr] = Field(default=None, alias="heroPatternSvg")
    __properties: ClassVar[List[str]] = ["backgroundColor", "foregroundColor", "foregroundOpacity", "heroPatternName", "heroPatternSvg"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HeroPattern from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if background_color (nullable) is None
        # and model_fields_set contains the field
        if self.background_color is None and "background_color" in self.model_fields_set:
            _dict['backgroundColor'] = None

        # set to None if foreground_color (nullable) is None
        # and model_fields_set contains the field
        if self.foreground_color is None and "foreground_color" in self.model_fields_set:
            _dict['foregroundColor'] = None

        # set to None if foreground_opacity (nullable) is None
        # and model_fields_set contains the field
        if self.foreground_opacity is None and "foreground_opacity" in self.model_fields_set:
            _dict['foregroundOpacity'] = None

        # set to None if hero_pattern_name (nullable) is None
        # and model_fields_set contains the field
        if self.hero_pattern_name is None and "hero_pattern_name" in self.model_fields_set:
            _dict['heroPatternName'] = None

        # set to None if hero_pattern_svg (nullable) is None
        # and model_fields_set contains the field
        if self.hero_pattern_svg is None and "hero_pattern_svg" in self.model_fields_set:
            _dict['heroPatternSvg'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HeroPattern from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backgroundColor": obj.get("backgroundColor"),
            "foregroundColor": obj.get("foregroundColor"),
            "foregroundOpacity": obj.get("foregroundOpacity"),
            "heroPatternName": obj.get("heroPatternName"),
            "heroPatternSvg": obj.get("heroPatternSvg")
        })
        return _obj


