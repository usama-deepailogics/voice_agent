# coding: utf-8

"""
    Trieve API

    Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.

    The version of the OpenAPI document: 0.13.0
    Contact: developers@trieve.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from trieve_py_client.models.button_trigger import ButtonTrigger
from trieve_py_client.models.hero_pattern import HeroPattern
from trieve_py_client.models.open_graph_metadata import OpenGraphMetadata
from trieve_py_client.models.public_page_search_options import PublicPageSearchOptions
from trieve_py_client.models.public_page_tab_message import PublicPageTabMessage
from trieve_py_client.models.public_page_tag import PublicPageTag
from trieve_py_client.models.public_page_theme import PublicPageTheme
from trieve_py_client.models.single_product_options import SingleProductOptions
from typing import Optional, Set
from typing_extensions import Self

class PublicPageParameters(BaseModel):
    """
    PublicPageParameters
    """ # noqa: E501
    allow_switching_modes: Optional[StrictBool] = Field(default=None, alias="allowSwitchingModes")
    analytics: Optional[StrictBool] = None
    api_key: Optional[StrictStr] = Field(default=None, alias="apiKey")
    base_url: Optional[StrictStr] = Field(default=None, alias="baseUrl")
    brand_color: Optional[StrictStr] = Field(default=None, alias="brandColor")
    brand_font_family: Optional[StrictStr] = Field(default=None, alias="brandFontFamily")
    brand_logo_img_src_url: Optional[StrictStr] = Field(default=None, alias="brandLogoImgSrcUrl")
    brand_name: Optional[StrictStr] = Field(default=None, alias="brandName")
    button_triggers: Optional[List[ButtonTrigger]] = Field(default=None, alias="buttonTriggers")
    chat: Optional[StrictBool] = None
    creator_linked_in_url: Optional[StrictStr] = Field(default=None, alias="creatorLinkedInUrl")
    creator_name: Optional[StrictStr] = Field(default=None, alias="creatorName")
    currency_position: Optional[StrictStr] = Field(default=None, alias="currencyPosition")
    dataset_id: Optional[StrictStr] = Field(default=None, alias="datasetId")
    debounce_ms: Optional[StrictInt] = Field(default=None, alias="debounceMs")
    default_ai_questions: Optional[List[StrictStr]] = Field(default=None, alias="defaultAiQuestions")
    default_currency: Optional[StrictStr] = Field(default=None, alias="defaultCurrency")
    default_image_question: Optional[StrictStr] = Field(default=None, alias="defaultImageQuestion")
    default_search_mode: Optional[StrictStr] = Field(default=None, alias="defaultSearchMode")
    default_search_queries: Optional[List[StrictStr]] = Field(default=None, alias="defaultSearchQueries")
    floating_button_position: Optional[StrictStr] = Field(default=None, alias="floatingButtonPosition")
    floating_search_icon_position: Optional[StrictStr] = Field(default=None, alias="floatingSearchIconPosition")
    followup_questions: Optional[StrictBool] = Field(default=None, alias="followupQuestions")
    for_brand_name: Optional[StrictStr] = Field(default=None, alias="forBrandName")
    heading_prefix: Optional[StrictStr] = Field(default=None, alias="headingPrefix")
    hero_pattern: Optional[HeroPattern] = Field(default=None, alias="heroPattern")
    hide_drawn_text: Optional[StrictBool] = Field(default=None, alias="hideDrawnText")
    inline: Optional[StrictBool] = None
    inline_header: Optional[StrictStr] = Field(default=None, alias="inlineHeader")
    is_test_mode: Optional[StrictBool] = Field(default=None, alias="isTestMode")
    nav_logo_img_src_url: Optional[StrictStr] = Field(default=None, alias="navLogoImgSrcUrl")
    number_of_suggestions: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="numberOfSuggestions")
    open_graph_metadata: Optional[OpenGraphMetadata] = Field(default=None, alias="openGraphMetadata")
    open_links_in_new_tab: Optional[StrictBool] = Field(default=None, alias="openLinksInNewTab")
    placeholder: Optional[StrictStr] = None
    problem_link: Optional[StrictStr] = Field(default=None, alias="problemLink")
    responsive: Optional[StrictBool] = None
    search_options: Optional[PublicPageSearchOptions] = Field(default=None, alias="searchOptions")
    show_floating_button: Optional[StrictBool] = Field(default=None, alias="showFloatingButton")
    show_floating_input: Optional[StrictBool] = Field(default=None, alias="showFloatingInput")
    show_floating_search_icon: Optional[StrictBool] = Field(default=None, alias="showFloatingSearchIcon")
    show_result_highlights: Optional[StrictBool] = Field(default=None, alias="showResultHighlights")
    single_product_options: Optional[SingleProductOptions] = Field(default=None, alias="singleProductOptions")
    suggested_queries: Optional[StrictBool] = Field(default=None, alias="suggestedQueries")
    tab_messages: Optional[List[PublicPageTabMessage]] = Field(default=None, alias="tabMessages")
    tags: Optional[List[PublicPageTag]] = None
    theme: Optional[PublicPageTheme] = None
    type: Optional[StrictStr] = None
    use_group_search: Optional[StrictBool] = Field(default=None, alias="useGroupSearch")
    use_local: Optional[StrictBool] = Field(default=None, alias="useLocal")
    use_pagefind: Optional[StrictBool] = Field(default=None, alias="usePagefind")
    video_link: Optional[StrictStr] = Field(default=None, alias="videoLink")
    video_position: Optional[StrictStr] = Field(default=None, alias="videoPosition")
    z_index: Optional[StrictInt] = Field(default=None, alias="zIndex")
    __properties: ClassVar[List[str]] = ["allowSwitchingModes", "analytics", "apiKey", "baseUrl", "brandColor", "brandFontFamily", "brandLogoImgSrcUrl", "brandName", "buttonTriggers", "chat", "creatorLinkedInUrl", "creatorName", "currencyPosition", "datasetId", "debounceMs", "defaultAiQuestions", "defaultCurrency", "defaultImageQuestion", "defaultSearchMode", "defaultSearchQueries", "floatingButtonPosition", "floatingSearchIconPosition", "followupQuestions", "forBrandName", "headingPrefix", "heroPattern", "hideDrawnText", "inline", "inlineHeader", "isTestMode", "navLogoImgSrcUrl", "numberOfSuggestions", "openGraphMetadata", "openLinksInNewTab", "placeholder", "problemLink", "responsive", "searchOptions", "showFloatingButton", "showFloatingInput", "showFloatingSearchIcon", "showResultHighlights", "singleProductOptions", "suggestedQueries", "tabMessages", "tags", "theme", "type", "useGroupSearch", "useLocal", "usePagefind", "videoLink", "videoPosition", "zIndex"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicPageParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in button_triggers (list)
        _items = []
        if self.button_triggers:
            for _item in self.button_triggers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['buttonTriggers'] = _items
        # override the default output from pydantic by calling `to_dict()` of hero_pattern
        if self.hero_pattern:
            _dict['heroPattern'] = self.hero_pattern.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_graph_metadata
        if self.open_graph_metadata:
            _dict['openGraphMetadata'] = self.open_graph_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of search_options
        if self.search_options:
            _dict['searchOptions'] = self.search_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of single_product_options
        if self.single_product_options:
            _dict['singleProductOptions'] = self.single_product_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tab_messages (list)
        _items = []
        if self.tab_messages:
            for _item in self.tab_messages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tabMessages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items
        # set to None if allow_switching_modes (nullable) is None
        # and model_fields_set contains the field
        if self.allow_switching_modes is None and "allow_switching_modes" in self.model_fields_set:
            _dict['allowSwitchingModes'] = None

        # set to None if analytics (nullable) is None
        # and model_fields_set contains the field
        if self.analytics is None and "analytics" in self.model_fields_set:
            _dict['analytics'] = None

        # set to None if api_key (nullable) is None
        # and model_fields_set contains the field
        if self.api_key is None and "api_key" in self.model_fields_set:
            _dict['apiKey'] = None

        # set to None if base_url (nullable) is None
        # and model_fields_set contains the field
        if self.base_url is None and "base_url" in self.model_fields_set:
            _dict['baseUrl'] = None

        # set to None if brand_color (nullable) is None
        # and model_fields_set contains the field
        if self.brand_color is None and "brand_color" in self.model_fields_set:
            _dict['brandColor'] = None

        # set to None if brand_font_family (nullable) is None
        # and model_fields_set contains the field
        if self.brand_font_family is None and "brand_font_family" in self.model_fields_set:
            _dict['brandFontFamily'] = None

        # set to None if brand_logo_img_src_url (nullable) is None
        # and model_fields_set contains the field
        if self.brand_logo_img_src_url is None and "brand_logo_img_src_url" in self.model_fields_set:
            _dict['brandLogoImgSrcUrl'] = None

        # set to None if brand_name (nullable) is None
        # and model_fields_set contains the field
        if self.brand_name is None and "brand_name" in self.model_fields_set:
            _dict['brandName'] = None

        # set to None if button_triggers (nullable) is None
        # and model_fields_set contains the field
        if self.button_triggers is None and "button_triggers" in self.model_fields_set:
            _dict['buttonTriggers'] = None

        # set to None if chat (nullable) is None
        # and model_fields_set contains the field
        if self.chat is None and "chat" in self.model_fields_set:
            _dict['chat'] = None

        # set to None if creator_linked_in_url (nullable) is None
        # and model_fields_set contains the field
        if self.creator_linked_in_url is None and "creator_linked_in_url" in self.model_fields_set:
            _dict['creatorLinkedInUrl'] = None

        # set to None if creator_name (nullable) is None
        # and model_fields_set contains the field
        if self.creator_name is None and "creator_name" in self.model_fields_set:
            _dict['creatorName'] = None

        # set to None if currency_position (nullable) is None
        # and model_fields_set contains the field
        if self.currency_position is None and "currency_position" in self.model_fields_set:
            _dict['currencyPosition'] = None

        # set to None if dataset_id (nullable) is None
        # and model_fields_set contains the field
        if self.dataset_id is None and "dataset_id" in self.model_fields_set:
            _dict['datasetId'] = None

        # set to None if debounce_ms (nullable) is None
        # and model_fields_set contains the field
        if self.debounce_ms is None and "debounce_ms" in self.model_fields_set:
            _dict['debounceMs'] = None

        # set to None if default_ai_questions (nullable) is None
        # and model_fields_set contains the field
        if self.default_ai_questions is None and "default_ai_questions" in self.model_fields_set:
            _dict['defaultAiQuestions'] = None

        # set to None if default_currency (nullable) is None
        # and model_fields_set contains the field
        if self.default_currency is None and "default_currency" in self.model_fields_set:
            _dict['defaultCurrency'] = None

        # set to None if default_image_question (nullable) is None
        # and model_fields_set contains the field
        if self.default_image_question is None and "default_image_question" in self.model_fields_set:
            _dict['defaultImageQuestion'] = None

        # set to None if default_search_mode (nullable) is None
        # and model_fields_set contains the field
        if self.default_search_mode is None and "default_search_mode" in self.model_fields_set:
            _dict['defaultSearchMode'] = None

        # set to None if default_search_queries (nullable) is None
        # and model_fields_set contains the field
        if self.default_search_queries is None and "default_search_queries" in self.model_fields_set:
            _dict['defaultSearchQueries'] = None

        # set to None if floating_button_position (nullable) is None
        # and model_fields_set contains the field
        if self.floating_button_position is None and "floating_button_position" in self.model_fields_set:
            _dict['floatingButtonPosition'] = None

        # set to None if floating_search_icon_position (nullable) is None
        # and model_fields_set contains the field
        if self.floating_search_icon_position is None and "floating_search_icon_position" in self.model_fields_set:
            _dict['floatingSearchIconPosition'] = None

        # set to None if followup_questions (nullable) is None
        # and model_fields_set contains the field
        if self.followup_questions is None and "followup_questions" in self.model_fields_set:
            _dict['followupQuestions'] = None

        # set to None if for_brand_name (nullable) is None
        # and model_fields_set contains the field
        if self.for_brand_name is None and "for_brand_name" in self.model_fields_set:
            _dict['forBrandName'] = None

        # set to None if heading_prefix (nullable) is None
        # and model_fields_set contains the field
        if self.heading_prefix is None and "heading_prefix" in self.model_fields_set:
            _dict['headingPrefix'] = None

        # set to None if hero_pattern (nullable) is None
        # and model_fields_set contains the field
        if self.hero_pattern is None and "hero_pattern" in self.model_fields_set:
            _dict['heroPattern'] = None

        # set to None if hide_drawn_text (nullable) is None
        # and model_fields_set contains the field
        if self.hide_drawn_text is None and "hide_drawn_text" in self.model_fields_set:
            _dict['hideDrawnText'] = None

        # set to None if inline (nullable) is None
        # and model_fields_set contains the field
        if self.inline is None and "inline" in self.model_fields_set:
            _dict['inline'] = None

        # set to None if inline_header (nullable) is None
        # and model_fields_set contains the field
        if self.inline_header is None and "inline_header" in self.model_fields_set:
            _dict['inlineHeader'] = None

        # set to None if is_test_mode (nullable) is None
        # and model_fields_set contains the field
        if self.is_test_mode is None and "is_test_mode" in self.model_fields_set:
            _dict['isTestMode'] = None

        # set to None if nav_logo_img_src_url (nullable) is None
        # and model_fields_set contains the field
        if self.nav_logo_img_src_url is None and "nav_logo_img_src_url" in self.model_fields_set:
            _dict['navLogoImgSrcUrl'] = None

        # set to None if number_of_suggestions (nullable) is None
        # and model_fields_set contains the field
        if self.number_of_suggestions is None and "number_of_suggestions" in self.model_fields_set:
            _dict['numberOfSuggestions'] = None

        # set to None if open_graph_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.open_graph_metadata is None and "open_graph_metadata" in self.model_fields_set:
            _dict['openGraphMetadata'] = None

        # set to None if open_links_in_new_tab (nullable) is None
        # and model_fields_set contains the field
        if self.open_links_in_new_tab is None and "open_links_in_new_tab" in self.model_fields_set:
            _dict['openLinksInNewTab'] = None

        # set to None if placeholder (nullable) is None
        # and model_fields_set contains the field
        if self.placeholder is None and "placeholder" in self.model_fields_set:
            _dict['placeholder'] = None

        # set to None if problem_link (nullable) is None
        # and model_fields_set contains the field
        if self.problem_link is None and "problem_link" in self.model_fields_set:
            _dict['problemLink'] = None

        # set to None if responsive (nullable) is None
        # and model_fields_set contains the field
        if self.responsive is None and "responsive" in self.model_fields_set:
            _dict['responsive'] = None

        # set to None if search_options (nullable) is None
        # and model_fields_set contains the field
        if self.search_options is None and "search_options" in self.model_fields_set:
            _dict['searchOptions'] = None

        # set to None if show_floating_button (nullable) is None
        # and model_fields_set contains the field
        if self.show_floating_button is None and "show_floating_button" in self.model_fields_set:
            _dict['showFloatingButton'] = None

        # set to None if show_floating_input (nullable) is None
        # and model_fields_set contains the field
        if self.show_floating_input is None and "show_floating_input" in self.model_fields_set:
            _dict['showFloatingInput'] = None

        # set to None if show_floating_search_icon (nullable) is None
        # and model_fields_set contains the field
        if self.show_floating_search_icon is None and "show_floating_search_icon" in self.model_fields_set:
            _dict['showFloatingSearchIcon'] = None

        # set to None if show_result_highlights (nullable) is None
        # and model_fields_set contains the field
        if self.show_result_highlights is None and "show_result_highlights" in self.model_fields_set:
            _dict['showResultHighlights'] = None

        # set to None if single_product_options (nullable) is None
        # and model_fields_set contains the field
        if self.single_product_options is None and "single_product_options" in self.model_fields_set:
            _dict['singleProductOptions'] = None

        # set to None if suggested_queries (nullable) is None
        # and model_fields_set contains the field
        if self.suggested_queries is None and "suggested_queries" in self.model_fields_set:
            _dict['suggestedQueries'] = None

        # set to None if tab_messages (nullable) is None
        # and model_fields_set contains the field
        if self.tab_messages is None and "tab_messages" in self.model_fields_set:
            _dict['tabMessages'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if theme (nullable) is None
        # and model_fields_set contains the field
        if self.theme is None and "theme" in self.model_fields_set:
            _dict['theme'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if use_group_search (nullable) is None
        # and model_fields_set contains the field
        if self.use_group_search is None and "use_group_search" in self.model_fields_set:
            _dict['useGroupSearch'] = None

        # set to None if use_local (nullable) is None
        # and model_fields_set contains the field
        if self.use_local is None and "use_local" in self.model_fields_set:
            _dict['useLocal'] = None

        # set to None if use_pagefind (nullable) is None
        # and model_fields_set contains the field
        if self.use_pagefind is None and "use_pagefind" in self.model_fields_set:
            _dict['usePagefind'] = None

        # set to None if video_link (nullable) is None
        # and model_fields_set contains the field
        if self.video_link is None and "video_link" in self.model_fields_set:
            _dict['videoLink'] = None

        # set to None if video_position (nullable) is None
        # and model_fields_set contains the field
        if self.video_position is None and "video_position" in self.model_fields_set:
            _dict['videoPosition'] = None

        # set to None if z_index (nullable) is None
        # and model_fields_set contains the field
        if self.z_index is None and "z_index" in self.model_fields_set:
            _dict['zIndex'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicPageParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowSwitchingModes": obj.get("allowSwitchingModes"),
            "analytics": obj.get("analytics"),
            "apiKey": obj.get("apiKey"),
            "baseUrl": obj.get("baseUrl"),
            "brandColor": obj.get("brandColor"),
            "brandFontFamily": obj.get("brandFontFamily"),
            "brandLogoImgSrcUrl": obj.get("brandLogoImgSrcUrl"),
            "brandName": obj.get("brandName"),
            "buttonTriggers": [ButtonTrigger.from_dict(_item) for _item in obj["buttonTriggers"]] if obj.get("buttonTriggers") is not None else None,
            "chat": obj.get("chat"),
            "creatorLinkedInUrl": obj.get("creatorLinkedInUrl"),
            "creatorName": obj.get("creatorName"),
            "currencyPosition": obj.get("currencyPosition"),
            "datasetId": obj.get("datasetId"),
            "debounceMs": obj.get("debounceMs"),
            "defaultAiQuestions": obj.get("defaultAiQuestions"),
            "defaultCurrency": obj.get("defaultCurrency"),
            "defaultImageQuestion": obj.get("defaultImageQuestion"),
            "defaultSearchMode": obj.get("defaultSearchMode"),
            "defaultSearchQueries": obj.get("defaultSearchQueries"),
            "floatingButtonPosition": obj.get("floatingButtonPosition"),
            "floatingSearchIconPosition": obj.get("floatingSearchIconPosition"),
            "followupQuestions": obj.get("followupQuestions"),
            "forBrandName": obj.get("forBrandName"),
            "headingPrefix": obj.get("headingPrefix"),
            "heroPattern": HeroPattern.from_dict(obj["heroPattern"]) if obj.get("heroPattern") is not None else None,
            "hideDrawnText": obj.get("hideDrawnText"),
            "inline": obj.get("inline"),
            "inlineHeader": obj.get("inlineHeader"),
            "isTestMode": obj.get("isTestMode"),
            "navLogoImgSrcUrl": obj.get("navLogoImgSrcUrl"),
            "numberOfSuggestions": obj.get("numberOfSuggestions"),
            "openGraphMetadata": OpenGraphMetadata.from_dict(obj["openGraphMetadata"]) if obj.get("openGraphMetadata") is not None else None,
            "openLinksInNewTab": obj.get("openLinksInNewTab"),
            "placeholder": obj.get("placeholder"),
            "problemLink": obj.get("problemLink"),
            "responsive": obj.get("responsive"),
            "searchOptions": PublicPageSearchOptions.from_dict(obj["searchOptions"]) if obj.get("searchOptions") is not None else None,
            "showFloatingButton": obj.get("showFloatingButton"),
            "showFloatingInput": obj.get("showFloatingInput"),
            "showFloatingSearchIcon": obj.get("showFloatingSearchIcon"),
            "showResultHighlights": obj.get("showResultHighlights"),
            "singleProductOptions": SingleProductOptions.from_dict(obj["singleProductOptions"]) if obj.get("singleProductOptions") is not None else None,
            "suggestedQueries": obj.get("suggestedQueries"),
            "tabMessages": [PublicPageTabMessage.from_dict(_item) for _item in obj["tabMessages"]] if obj.get("tabMessages") is not None else None,
            "tags": [PublicPageTag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "theme": obj.get("theme"),
            "type": obj.get("type"),
            "useGroupSearch": obj.get("useGroupSearch"),
            "useLocal": obj.get("useLocal"),
            "usePagefind": obj.get("usePagefind"),
            "videoLink": obj.get("videoLink"),
            "videoPosition": obj.get("videoPosition"),
            "zIndex": obj.get("zIndex")
        })
        return _obj


