# coding: utf-8

"""
    Trieve API

    Trieve OpenAPI Specification. This document describes all of the operations available through the Trieve API.

    The version of the OpenAPI document: 0.13.0
    Contact: developers@trieve.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from trieve_py_client.models.date_range import DateRange
from trieve_py_client.models.event_types_filter import EventTypesFilter
from typing import Optional, Set
from typing_extensions import Self

class EventAnalyticsFilter(BaseModel):
    """
    Filter to apply to the events when querying for them
    """ # noqa: E501
    date_range: Optional[DateRange] = None
    event_type: Optional[EventTypesFilter] = None
    is_conversion: Optional[StrictBool] = Field(default=None, description="Filter by conversions")
    metadata_filter: Optional[StrictStr] = Field(default=None, description="Filter by metadata path i.e. path.attribute = \\\"value\\\"")
    user_id: Optional[StrictStr] = Field(default=None, description="Filter by user ID")
    __properties: ClassVar[List[str]] = ["date_range", "event_type", "is_conversion", "metadata_filter", "user_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventAnalyticsFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of date_range
        if self.date_range:
            _dict['date_range'] = self.date_range.to_dict()
        # set to None if date_range (nullable) is None
        # and model_fields_set contains the field
        if self.date_range is None and "date_range" in self.model_fields_set:
            _dict['date_range'] = None

        # set to None if event_type (nullable) is None
        # and model_fields_set contains the field
        if self.event_type is None and "event_type" in self.model_fields_set:
            _dict['event_type'] = None

        # set to None if is_conversion (nullable) is None
        # and model_fields_set contains the field
        if self.is_conversion is None and "is_conversion" in self.model_fields_set:
            _dict['is_conversion'] = None

        # set to None if metadata_filter (nullable) is None
        # and model_fields_set contains the field
        if self.metadata_filter is None and "metadata_filter" in self.model_fields_set:
            _dict['metadata_filter'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventAnalyticsFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date_range": DateRange.from_dict(obj["date_range"]) if obj.get("date_range") is not None else None,
            "event_type": obj.get("event_type"),
            "is_conversion": obj.get("is_conversion"),
            "metadata_filter": obj.get("metadata_filter"),
            "user_id": obj.get("user_id")
        })
        return _obj


